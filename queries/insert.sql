WITH
    ALL_EMPTY_SEATS AS (
        SELECT
            (CASE WHEN :discount = 'Y' THEN 0.2 ELSE 0.1 END) AS DISCOUNT,
            (CASE WHEN IS_IMAX = 'Y' AND DIMENSION = '3D' THEN 34 WHEN IS_IMAX = 'Y' AND DIMENSION <> '3D' THEN 33 WHEN IS_IMAX <> 'Y' AND DIMENSION = '3D' THEN 37 ELSE 30 END) AS BASE_PRICE,
            CURRENT_TIMESTAMP AS PURCHASE,
            ID_SEAT AS FK_SEAT,
            ID_SHOW AS FK_SHOW,
            ID_MOVIE,
            :id_user AS FK_USER,
            SHOW_DATE + NUMTODSINTERVAL(START_HOUR, 'HOUR') + NUMTODSINTERVAL(START_MINUTE, 'MINUTE') AS BEGIN_DATE,
            SHOW_DATE + NUMTODSINTERVAL(START_HOUR, 'HOUR') + NUMTODSINTERVAL(START_MINUTE, 'MINUTE') + NUMTODSINTERVAL(DURATION, 'MINUTE') AS END_DATE
        FROM MOVIES
            JOIN MOVIEVERSIONS ON MOVIES.ID_MOVIE = MOVIEVERSIONS.FK_MOVIE
            JOIN SHOWS ON SHOWS.FK_MOVIE_VERSION = MOVIEVERSIONS.ID_MOVIE_VERSION
            JOIN ROOMS ON SHOWS.FK_ROOM = ROOMS.ID_ROOM
            JOIN SEATS ON SEATS.FK_ROOM = ROOMS.ID_ROOM
        WHERE
            /*SHOW_DATE > CURRENT_DATE
          AND*/ (FK_SUBTITLES_LANGUAGE = :language OR FK_VOICE_OVER_LANGUAGE = :language OR FK_DUBBING_LANGUAGE = :language OR (FK_DUBBING_LANGUAGE IS NULL AND FK_LANGUAGE = :language))
          AND DIMENSION = :dimension
          AND (ID_SHOW, ID_SEAT) NOT IN (SELECT FK_SHOW, FK_SEAT FROM TICKETS)
          AND IS_VIP_SEAT <> 'Y'
    ),
    POSSIBLE_SHOWS AS (
        SELECT ID_MOVIE, DISCOUNT, BASE_PRICE, PURCHASE, FIRST_VALUE(FK_SEAT) AS FK_SEAT, FK_SHOW, FK_USER, BEGIN_DATE, END_DATE
        FROM ALL_EMPTY_SEATS
        GROUP BY ID_MOVIE, DISCOUNT, BASE_PRICE, PURCHASE, FK_SHOW, FK_USER, BEGIN_DATE, END_DATE
    ),
    PRIMARY_SHOWS AS (
        SELECT ID_MOVIE, FIRST_VALUE(DISCOUNT) AS DISCOUNT, FIRST_VALUE(BASE_PRICE) AS BASE_PRICE, FIRST_VALUE(PURCHASE) AS PURCHASE, FIRST_VALUE(FK_SEAT) AS FK_SEAT, FIRST_VALUE(FK_SHOW) AS FK_SHOW, FIRST_VALUE(FK_USER) AS FK_USER, FIRST_VALUE(BEGIN_DATE) AS BEGIN_DATE, FIRST_VALUE(END_DATE) AS END_DATE
        FROM POSSIBLE_SHOWS
        GROUP BY ID_MOVIE
    ),
    CONFLICTING_PRIMARY_SHOWS AS (
        SELECT P1.DISCOUNT, P1.BASE_PRICE, P1.PURCHASE, P1.FK_SEAT, P1.FK_SHOW, P1.FK_USER
        FROM PRIMARY_SHOWS P1 CROSS JOIN PRIMARY_SHOWS P2
        WHERE NOT (P1.BEGIN_DATE > P2.END_DATE OR P2.BEGIN_DATE > P1.END_DATE)
    )
SELECT * FROM CONFLICTING_PRIMARY_SHOWS

